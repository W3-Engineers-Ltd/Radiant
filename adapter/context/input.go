package context

import (
	"github.com/W3-Engineers-Ltd/Radiant/server/web/context"
)

// RadiantInput operates the http request header, data, cookie and body.
// it also contains router params and current session.
type RadiantInput context.RadiantInput

// NewInput return RadiantInput generated by Context.
func NewInput() *RadiantInput {
	return (*RadiantInput)(context.NewInput())
}

// Reset init the RadiantInput
func (input *RadiantInput) Reset(ctx *Context) {
	(*context.RadiantInput)(input).Reset((*context.Context)(ctx))
}

// Protocol returns request protocol name, such as HTTP/1.1 .
func (input *RadiantInput) Protocol() string {
	return (*context.RadiantInput)(input).Protocol()
}

// URI returns full request url with query string, fragment.
func (input *RadiantInput) URI() string {
	return input.Context.Request.RequestURI
}

// URL returns request url path (without query string, fragment).
func (input *RadiantInput) URL() string {
	return (*context.RadiantInput)(input).URL()
}

// Site returns base site url as scheme://domain type.
func (input *RadiantInput) Site() string {
	return (*context.RadiantInput)(input).Site()
}

// Scheme returns request scheme as "http" or "https".
func (input *RadiantInput) Scheme() string {
	return (*context.RadiantInput)(input).Scheme()
}

// Domain returns host name.
// Alias of Host method.
func (input *RadiantInput) Domain() string {
	return (*context.RadiantInput)(input).Domain()
}

// Host returns host name.
// if no host info in request, return localhost.
func (input *RadiantInput) Host() string {
	return (*context.RadiantInput)(input).Host()
}

// Method returns http request method.
func (input *RadiantInput) Method() string {
	return (*context.RadiantInput)(input).Method()
}

// Is returns boolean of this request is on given method, such as Is("POST").
func (input *RadiantInput) Is(method string) bool {
	return (*context.RadiantInput)(input).Is(method)
}

// IsGet Is this a GET method request?
func (input *RadiantInput) IsGet() bool {
	return (*context.RadiantInput)(input).IsGet()
}

// IsPost Is this a POST method request?
func (input *RadiantInput) IsPost() bool {
	return (*context.RadiantInput)(input).IsPost()
}

// IsHead Is this a Head method request?
func (input *RadiantInput) IsHead() bool {
	return (*context.RadiantInput)(input).IsHead()
}

// IsOptions Is this a OPTIONS method request?
func (input *RadiantInput) IsOptions() bool {
	return (*context.RadiantInput)(input).IsOptions()
}

// IsPut Is this a PUT method request?
func (input *RadiantInput) IsPut() bool {
	return (*context.RadiantInput)(input).IsPut()
}

// IsDelete Is this a DELETE method request?
func (input *RadiantInput) IsDelete() bool {
	return (*context.RadiantInput)(input).IsDelete()
}

// IsPatch Is this a PATCH method request?
func (input *RadiantInput) IsPatch() bool {
	return (*context.RadiantInput)(input).IsPatch()
}

// IsAjax returns boolean of this request is generated by ajax.
func (input *RadiantInput) IsAjax() bool {
	return (*context.RadiantInput)(input).IsAjax()
}

// IsSecure returns boolean of this request is in https.
func (input *RadiantInput) IsSecure() bool {
	return (*context.RadiantInput)(input).IsSecure()
}

// IsWebsocket returns boolean of this request is in webSocket.
func (input *RadiantInput) IsWebsocket() bool {
	return (*context.RadiantInput)(input).IsWebsocket()
}

// IsUpload returns boolean of whether file uploads in this request or not..
func (input *RadiantInput) IsUpload() bool {
	return (*context.RadiantInput)(input).IsUpload()
}

// AcceptsHTML Checks if request accepts html response
func (input *RadiantInput) AcceptsHTML() bool {
	return (*context.RadiantInput)(input).AcceptsHTML()
}

// AcceptsXML Checks if request accepts xml response
func (input *RadiantInput) AcceptsXML() bool {
	return (*context.RadiantInput)(input).AcceptsXML()
}

// AcceptsJSON Checks if request accepts json response
func (input *RadiantInput) AcceptsJSON() bool {
	return (*context.RadiantInput)(input).AcceptsJSON()
}

// AcceptsYAML Checks if request accepts json response
func (input *RadiantInput) AcceptsYAML() bool {
	return (*context.RadiantInput)(input).AcceptsYAML()
}

// IP returns request client ip.
// if in proxy, return first proxy id.
// if error, return RemoteAddr.
func (input *RadiantInput) IP() string {
	return (*context.RadiantInput)(input).IP()
}

// Proxy returns proxy client ips slice.
func (input *RadiantInput) Proxy() []string {
	return (*context.RadiantInput)(input).Proxy()
}

// Referer returns http referer header.
func (input *RadiantInput) Referer() string {
	return (*context.RadiantInput)(input).Referer()
}

// Refer returns http referer header.
func (input *RadiantInput) Refer() string {
	return (*context.RadiantInput)(input).Refer()
}

// SubDomains returns sub domain string.
// if aa.bb.domain.com, returns aa.bb .
func (input *RadiantInput) SubDomains() string {
	return (*context.RadiantInput)(input).SubDomains()
}

// Port returns request client port.
// when error or empty, return 80.
func (input *RadiantInput) Port() int {
	return (*context.RadiantInput)(input).Port()
}

// UserAgent returns request client user agent string.
func (input *RadiantInput) UserAgent() string {
	return (*context.RadiantInput)(input).UserAgent()
}

// ParamsLen return the length of the params
func (input *RadiantInput) ParamsLen() int {
	return (*context.RadiantInput)(input).ParamsLen()
}

// Param returns router param by a given key.
func (input *RadiantInput) Param(key string) string {
	return (*context.RadiantInput)(input).Param(key)
}

// Params returns the map[key]value.
func (input *RadiantInput) Params() map[string]string {
	return (*context.RadiantInput)(input).Params()
}

// SetParam will set the param with key and value
func (input *RadiantInput) SetParam(key, val string) {
	(*context.RadiantInput)(input).SetParam(key, val)
}

// ResetParams clears any of the input's Params
// This function is used to clear parameters so they may be reset between filter
// passes.
func (input *RadiantInput) ResetParams() {
	(*context.RadiantInput)(input).ResetParams()
}

// Query returns input data item string by a given string.
func (input *RadiantInput) Query(key string) string {
	return (*context.RadiantInput)(input).Query(key)
}

// Header returns request header item string by a given string.
// if non-existed, return empty string.
func (input *RadiantInput) Header(key string) string {
	return (*context.RadiantInput)(input).Header(key)
}

// Cookie returns request cookie item string by a given key.
// if non-existed, return empty string.
func (input *RadiantInput) Cookie(key string) string {
	return (*context.RadiantInput)(input).Cookie(key)
}

// Session returns current session item value by a given key.
// if non-existed, return nil.
func (input *RadiantInput) Session(key interface{}) interface{} {
	return (*context.RadiantInput)(input).Session(key)
}

// CopyBody returns the raw request body data as bytes.
func (input *RadiantInput) CopyBody(MaxMemory int64) []byte {
	return (*context.RadiantInput)(input).CopyBody(MaxMemory)
}

// Data return the implicit data in the input
func (input *RadiantInput) Data() map[interface{}]interface{} {
	return (*context.RadiantInput)(input).Data()
}

// GetData returns the stored data in this context.
func (input *RadiantInput) GetData(key interface{}) interface{} {
	return (*context.RadiantInput)(input).GetData(key)
}

// SetData stores data with given key in this context.
// This data are only available in this context.
func (input *RadiantInput) SetData(key, val interface{}) {
	(*context.RadiantInput)(input).SetData(key, val)
}

// ParseFormOrMulitForm parseForm or parseMultiForm based on Content-type
func (input *RadiantInput) ParseFormOrMulitForm(maxMemory int64) error {
	return (*context.RadiantInput)(input).ParseFormOrMultiForm(maxMemory)
}

// Bind data from request.Form[key] to dest
// like /?id=123&isok=true&ft=1.2&ol[0]=1&ol[1]=2&ul[]=str&ul[]=array&user.Name=astaxie
// var id int  radiantInput.Bind(&id, "id")  id ==123
// var isok bool  radiantInput.Bind(&isok, "isok")  isok ==true
// var ft float64  radiantInput.Bind(&ft, "ft")  ft ==1.2
// ol := make([]int, 0, 2)  radiantInput.Bind(&ol, "ol")  ol ==[1 2]
// ul := make([]string, 0, 2)  radiantInput.Bind(&ul, "ul")  ul ==[str array]
// user struct{Name}  radiantInput.Bind(&user, "user")  user == {Name:"astaxie"}
func (input *RadiantInput) Bind(dest interface{}, key string) error {
	return (*context.RadiantInput)(input).Bind(dest, key)
}
